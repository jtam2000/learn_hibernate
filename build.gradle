plugins {
    id 'java'
    id 'application'
}

group = 'com.github.jtam2000'
version = '1.0.1'


ext {
    mainClassName1 = "${group}.package1.StartHibernate"
    groupPrefix = "${group}"
    mainClassName2 = "${group}.package2.HelloWorldTwo"
    homePath = System.properties['user.home']

}


repositories {

    mavenCentral()
    maven {
        name "confluent.repo"
        url "https://packages.confluent.io/maven/"
    }
    maven {
        name "com.github.jtam2000.repo"
        url "${homePath}/Development/Learning/learn_daily_problem/build/repo"
    }
}


dependencies {
    annotationProcessor('org.hibernate:hibernate-jpamodelgen:5.4.21.Final')
    implementation 'org.apache.commons:commons-math3:3.6.1',
            'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.11.1',
            'org.apache.avro:avro:1.9.2',
            'org.apache.kafka:kafka-clients:0.10.0.1',
            'io.confluent:kafka-avro-serializer:5.3.0',
            'org.hibernate:hibernate-core:5.4.21.Final',
            'mysql:mysql-connector-java:8.0.21',
            'org.hibernate:hibernate-jpamodelgen:5.4.21.Final'
          //  ,'com.github.jtam2000:common:1.0.1'

    testImplementation 'junit:junit:4.12',
            'org.apache.commons:commons-math3:3.6.1',
            'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.11.1',
            'org.apache.avro:avro:1.9.2',
            'org.apache.kafka:kafka-clients:0.10.0.1',
            'org.slf4j:slf4j-nop:1.7.25',
            'io.confluent:kafka-avro-serializer:5.3.0',
            'org.hibernate:hibernate-core:5.4.21.Final',
            'mysql:mysql-connector-java:8.0.21'
}

tasks.withType(JavaCompile) {
    options.annotationProcessorGeneratedSourcesDirectory = file("src/main/java")
}

jar {
    manifest {
        attributes(
                'Main-Class': "${mainClassName1}"
        )
    }
}

application {
    mainClassName = "${mainClassName1}"
}

task runApp2(type: JavaExec) {

    description = "Run the second app"
    classpath = sourceSets.main.runtimeClasspath
    main = "${groupPrefix}.package2.HelloWorldTwo"
}

task avroSchemaGenCode(type: Exec) {

    description = "Generate Java files for Avro Schema changes"

    def AVRO_TOOl = '/usr/local/bin/avro-tools'
    def PROJ_AVRO_ROOT = 'src/main/resources/avro'
    def PROJ_AVRO_JAVA_CODE_DIR = 'src/main/java'
    def schema_file = "${PROJ_AVRO_ROOT}/avroSchema.avsc"

    inputs.file(schema_file)

    commandLine "$AVRO_TOOl", "compile", "schema",
            "$schema_file",
            "$PROJ_AVRO_JAVA_CODE_DIR"
}

task GitInit(type: Exec) {

    def current_folder = projectDir.getName()
    def source_script = "admin/gitproject.ksh"

    commandLine "/bin/bash", "$source_script", "$current_folder"

}

task RunAScript(type: Exec) {

    def current_folder = projectDir.getName()
    def source_script = "admin/test.ksh"

    commandLine "/bin/bash", "$source_script", "$current_folder"
}